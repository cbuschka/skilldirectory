{
	"variables": [],
	"info": {
		"name": "SkillDirectory  200",
		"_postman_id": "8971daea-dbc8-0473-480e-58b970da357f",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1 - POST",
			"description": "",
			"item": [
				{
					"name": "Team Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response & init vars",
									"const { id, name } = JSON.parse(responseBody);",
									"const code         = responseCode.code;",
									"",
									"// Tests",
									"tests[\"Status code is 200\"] = code === 200;",
									"tests['Body contains id']   = id   !== '' && id   !== undefined;",
									"tests['Body contains name'] = name !== '' && name !== undefined;",
									"",
									"// Env Vars (for chaining use)",
									"postman.setEnvironmentVariable('teamMember', responseBody);",
									"postman.setEnvironmentVariable('teamMemberID', id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Since this is first test in suite, clear env vars except for url",
									"const url = environment.url;",
									"postman.clearEnvironmentVariables();",
									"postman.setEnvironmentVariable('url', url);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/teammembers/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":  \"Joe Smith\",\n\t\"title\": \"Developer\"\n}\n"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response & init vars",
									"const { id, name, skill_type } = JSON.parse(responseBody);",
									"var code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200'] =       code       === 200;",
									"tests['Body contains id']   =       id         !== '' && id         !== undefined;",
									"tests['Body contains name'] =       name       !== '' && name       !== undefined;",
									"tests['Body contains skill_type'] = skill_type !== '' && skill_type !== undefined;",
									"",
									"// Env Vars (for chaining use)",
									"postman.setEnvironmentVariable('skill', responseBody)",
									"postman.setEnvironmentVariable('skillID', id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skills/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":       \"Java\",\n\t\"skill_type\": \"compiled\",\n\t\"webpage\": {\n\t  \"link_type\": \"Webpage\",\n\t  \"name\":      \"Java\",\n\t  \"url\":       \"http://www.javaworld.com/blog/java-101/\"\n\t},\n\t\"tutorials\":  [\n\t  {\n\t    \"link_type\": \"Tutorial\",\n\t    \"name\":      \"Java\",\n\t    \"url\":       \"http://www.javaworld.com/blog/java-101/\"\n\t  }\n\t],\n\t\"blogs\": [\n\t  {\n\t    \"link_type\": \"Blog\",\n\t    \"name\":      \"Java\",\n\t    \"url\":       \"http://www.javaworld.com/blog/java-101/\"\n\t  }\n\t]\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "TMSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response & init vars",
									"const {id, skill_id, team_member_id, wish_list, proficiency } = JSON.parse(responseBody);",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']           = code           === 200;",
									"tests['Body contains id']             = id             !== '' && id             !== undefined;",
									"tests['Body contains skill_id']       = skill_id       !== '' && skill_id       !== undefined;",
									"tests['Body contains team_member_id'] = team_member_id !== '' && team_member_id !== undefined;",
									"tests['Body contains wish_list']      = wish_list      !== '' && wish_list      !== undefined;",
									"tests['Body contains proficiency']    = proficiency    !== '' && proficiency    !== undefined;",
									"",
									"tests['Received team_member_id === {{teamMemberID}}'] = team_member_id === environment.teamMemberID;",
									"tests['Received skill_id === {{skillID}}']            = skill_id       === environment.skillID;",
									"",
									"// Env Vars",
									"postman.setEnvironmentVariable('tmSkill', responseBody)",
									"postman.setEnvironmentVariable('tmSkillID', id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/tmskills/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"proficiency\":    5,\n    \"skill_id\":       \"{{skillID}}\",\n    \"team_member_id\": \"{{teamMemberID}}\",\n    \"wish_list\":      true\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response & init vars",
									"const { id, name, url, skill_id, link_type } = JSON.parse(responseBody);",
									"const code     = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']      = code      === 200;",
									"tests['Body contains id']        = id        !== '' && id        !== undefined;",
									"tests['Body contains name']      = name      !== '' && name      !== undefined;",
									"tests['Body contains url']       = url       !== '' && name      !== undefined;",
									"tests['Body contains skill_id']  = skill_id  !== '' && skill_id  !== undefined;",
									"tests['Body contains link_type'] = link_type !== '' && link_type !== undefined;",
									"",
									"tests['Received skill_id === {{skillID}}'] = skill_id === environment.skillID;",
									"",
									"// Env Vars",
									"postman.setEnvironmentVariable('link', responseBody);",
									"postman.setEnvironmentVariable('linkID', id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/links/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":      \"Google\",\n\t\"link_type\": \"webpage\",\n\t\"skill_id\":  \"{{skillID}}\",\n\t\"url\":       \"http://www.google.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Skill Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response & init vars",
									"const { id, skill_id, team_member_id, body, timestamp, positive } = JSON.parse(responseBody);",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']           = code           === 200;",
									"tests['Body contains id']             = id             !== '' && id             !== undefined;",
									"tests['Body contains skill_id']       = skill_id       !== '' && skill_id       !== undefined;",
									"tests['Body contains team_member_id'] = team_member_id !== '' && team_member_id !== undefined;",
									"tests['Body contains body']           = body           !== '' && body           !== undefined;",
									"tests['Body contains timestamp']      = timestamp      !== '' && timestamp      !== undefined;",
									"tests['Body contains positive']       = positive       !== '' && positive       !== undefined;",
									"",
									"// Env Vars (for chaining use)",
									"postman.setEnvironmentVariable('skillReview', responseBody)",
									"postman.setEnvironmentVariable('skillReviewID', id);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skillreviews/",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"skill_id\":       \"{{skillID}}\",\n\t\"team_member_id\": \"{{teamMemberID}}\",\n\t\"body\":           \"It's the best skill ever\",\n\t\"positive\":       true\n}\n"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2 - GET",
			"description": "",
			"item": [
				{
					"name": "All Skills",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const resp = JSON.parse(responseBody);",
									"const code = responseCode.code;",
									"",
									"// Make sure response contains valid array of skills",
									"const skillFields = new Set(['id', 'name', 'skill_type']);",
									"var respIsValidSkillArr = true;",
									"resp.forEach((obj) => {",
									"    const keys = new Set(Object.keys(obj));",
									"    if(keys.size !== skillFields.size)",
									"      respIsValidSkillArr = false;",
									"    else",
									"      keys.forEach((key) => {",
									"        if(!skillFields.has(key)) // If key is not in skillFields",
									"          respIsValidSkillArr = false;",
									"      });",
									"});",
									"",
									"// Tests",
									"tests['Status code is 200']                    = code === 200;",
									"tests['Body is array of skills']               = respIsValidSkillArr;",
									"tests['Body contains previously POSTed skill'] = responseBody.has(environment.skill);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skills/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "A Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const { id, name, skill_type, links, icon } = JSON.parse(responseBody);",
									"const prevSkill = JSON.parse(environment.skill);",
									"const code      = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']                    = code === 200;",
									"tests['Body contains previously POSTed skill'] = id         === prevSkill.id   &&",
									"                                                 name       === prevSkill.name &&",
									"                                                 skill_type === prevSkill.skill_type;",
									"tests['Body contains skill DTO'] = links !== undefined &&",
									"                                   icon  !== undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skills/{{skillID}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "All Team Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const resp = JSON.parse(responseBody);",
									"const code = responseCode.code;",
									"",
									"// Make sure response contains valid array of team members",
									"const tmFields = new Set(['id', 'name', 'title']);",
									"var respIsValidTMArr = true;",
									"resp.forEach((obj) => {",
									"    const keys = new Set(Object.keys(obj));",
									"    if(keys.size !== tmFields.size)",
									"      respIsValidTMArr = false;",
									"    else",
									"      keys.forEach((key) => {",
									"        if(!tmFields.has(key)) // If key is not in tmFields",
									"          respIsValidTMArr = false;",
									"      });",
									"});",
									"",
									"// Tests",
									"tests['Status code is 200']                          = code === 200;",
									"tests['Body is array of team members']               = respIsValidTMArr;",
									"tests['Body contains previously POSTed team member'] = responseBody.has(environment.teamMember);"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/teammembers/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "A Team Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const { id, name, title, tm_skills } = JSON.parse(responseBody);",
									"const prevTM = JSON.parse(environment.teamMember);",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']                          = code  === 200;",
									"tests['Body contains previously POSTed team member'] = id    === prevTM.id   &&",
									"                                                       name  === prevTM.name &&",
									"                                                       title === prevTM.title;",
									"tests['Body contains team member DTO'] = tm_skills !== undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/teammembers/{{teamMemberID}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "All TMSkills",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const resp = JSON.parse(responseBody);",
									"const code = responseCode.code;",
									"",
									"// Make sure response contains valid array of skills",
									"const tmSkillFields = new Set(['id', 'skill_id', 'team_member_id', 'wish_list', 'proficiency', 'skill_name', 'team_member_name']);",
									"var respIsValidTMSkillArr = true;",
									"resp.forEach((obj) => {",
									"    const keys = new Set(Object.keys(obj));",
									"    if(keys.size !== tmSkillFields.size)",
									"      respIsValidTMSkillArr = false;",
									"    else",
									"      keys.forEach((key) => {",
									"        if(!tmSkillFields.has(key)) // If key is not in skillFields",
									"          respIsValidTMSkillArr = false;",
									"      });",
									"});",
									"",
									"// Tests",
									"tests['Status code is 200']                      = code === 200;",
									"tests['Body is array of TMSkills']               = respIsValidTMSkillArr;",
									"tests['Body contains previously POSTed tmSkill'] = responseBody.has(environment.tmSkill.replace('{', '').replace('}', ''));"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/tmskills/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "A TMSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const { id, skill_id, team_member_id, wish_list, proficiency, skill_name, team_member_name } = JSON.parse(responseBody);",
									"const prevTMSkill = JSON.parse(environment.tmSkill);",
									"const code        = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']                      = code             === 200;",
									"tests['Body contains previously POSTed tmskill'] = id               === prevTMSkill.id             &&",
									"                                                   skill_id         === prevTMSkill.skill_id       &&",
									"                                                   team_member_id   === prevTMSkill.team_member_id &&",
									"                                                   wish_list        === prevTMSkill.wish_list      &&",
									"                                                   proficiency      === prevTMSkill.proficiency;",
									"tests['Body contains tmskill DTO'] = skill_name       !== undefined &&",
									"                                     team_member_name !== undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/tmskills/{{tmSkillID}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "All Links",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const resp     = JSON.parse(responseBody);",
									"const prevLink = JSON.parse(environment.link);",
									"const code     = responseCode.code;",
									"",
									"// Make sure all elements in reponse have required fields for a link",
									"var isValidLinkArr = true;",
									"resp.forEach((obj) => {",
									"    if (obj.id        === undefined ||",
									"        obj.link_type === undefined ||",
									"        obj.name      === undefined ||",
									"        obj.skill_id  === undefined ||",
									"        obj.url       === undefined)",
									"      isValidLinkArr = false;",
									"});",
									"",
									"// Make sure response contains previously posted link",
									"var containsPrevLink = false;",
									"resp.forEach((obj) => {",
									"    if (obj.id        === prevLink.id        &&",
									"        obj.link_type === prevLink.link_type &&",
									"        obj.name      === prevLink.name      &&",
									"        obj.skill_id  === prevLink.skill_id  &&",
									"        obj.url       === prevLink.url)",
									"      containsPrevLink = true;",
									"});",
									"",
									"// Tests",
									"tests['Status code is 200']                   = code === 200;",
									"tests['Body is array of Links']               = isValidLinkArr;",
									"tests['Body contains previously POSTed Link'] = containsPrevLink;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/links/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "A Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const { id, name, url, skill_id, link_type } = JSON.parse(responseBody);",
									"const prevLink = JSON.parse(environment.link);",
									"const code     = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']                   = code === 200;",
									"tests['Body contains previously POSTed link'] = id        === prevLink.id       &&",
									"                                                name      === prevLink.name     &&",
									"                                                url       === prevLink.url      &&",
									"                                                skill_id  === prevLink.skill_id &&",
									"                                                link_type === prevLink.link_type;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/links/{{linkID}}",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "All Skill Reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const resp       = JSON.parse(responseBody);",
									"const prevReview = JSON.parse(environment.skillReview);",
									"const code       = responseCode.code;",
									"",
									"// Make sure all elements in reponse have required fields for a skill review",
									"var isValidReviewArr = true;",
									"resp.forEach((obj) => {",
									"    if (obj.id               === undefined ||",
									"        obj.skill_id         === undefined ||",
									"        obj.team_member_id   === undefined ||",
									"        obj.body             === undefined ||",
									"        //obj.timestamp        === undefined ||",
									"        obj.positive         === undefined ||",
									"        obj.skill_name       === undefined ||",
									"        obj.team_member_name === undefined)",
									"      isValidReviewArr = false;",
									"});",
									"",
									"// Make sure response contains previously posted skill review",
									"var containsPrevReview = false;",
									"resp.forEach((obj) => {",
									"    if (obj.id             === prevReview.id             &&",
									"        obj.skill_id       === prevReview.skill_id       &&",
									"        obj.team_member_id === prevReview.team_member_id &&",
									"        obj.body           === prevReview.body           &&",
									"        //obj.timestamp      === prevReview.timestamp      &&",
									"        obj.positive       === prevReview.positive)",
									"      containsPrevReview = true;",
									"});",
									"",
									"// Tests",
									"tests['Status code is 200']                           = code === 200;",
									"tests['Body is array of skill reviews']               = isValidReviewArr;",
									"tests['Body contains previously POSTed skill review'] = containsPrevReview;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skillreviews/",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "A Skill Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Parse response",
									"const { id, skill_id, team_member_id, body, timestamp, positive, skill_name, team_member_name } = JSON.parse(responseBody);",
									"const prevReview = JSON.parse(environment.skillReview);",
									"const code       = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200']                           = code === 200;",
									"tests['Body contains previously POSTed skill review'] = id             === prevReview.id             &&",
									"                                                        skill_id       === prevReview.skill_id       &&",
									"                                                        team_member_id === prevReview.team_member_id &&",
									"                                                        body           === prevReview.body           &&",
									"                                                        //timestamp      === prevReview.timestamp      &&",
									"                                                        positive       === prevReview.positive;",
									"tests['Body contains skill review DTO'] = skill_name       !== undefined &&",
									"                                          team_member_name !== undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skillreviews/{{skillReviewID}}",
						"method": "GET",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3 - PUT",
			"description": "",
			"item": [
				{
					"name": "TMSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests['Status code is 200'] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/tmskills/{{tmSkillID}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"proficiency\":    5,\n    \"skill_id\":       \"{{skillID}}\",\n    \"team_member_id\": \"{{teamMemberID}}\",\n    \"wish_list\":      true\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Skill Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests['Status code is 200'] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skillreviews/{{skillReviewID}}",
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"body\": \"This here is an updated skill review body!\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4 - DELETE",
			"description": "",
			"item": [
				{
					"name": "Team Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Init vars",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200'] = code         === 200;",
									"tests['Body is empty']      = responseBody === '';"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/teammembers/{{teamMemberID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": " TMSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Init vars",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200'] = code         === 200;",
									"tests['Body is empty']      = responseBody === '';"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/tmskills/{{tmSkillID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Init vars",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200'] = code         === 200;",
									"tests['Body is empty']      = responseBody === '';"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/links/{{linkID}}",
						"method": "DELETE",
						"header": [],
						"body": {},
						"description": ""
					},
					"response": []
				},
				{
					"name": " SkillReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Init vars",
									"const code = responseCode.code;",
									"",
									"// Tests",
									"tests['Status code is 200'] = code         === 200;",
									"tests['Body is empty']      = responseBody === '';"
								]
							}
						}
					],
					"request": {
						"url": "{{url}}/skillreviews/{{skillReviewID}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\":       \"{{skillReviewID}}\",\n\t\"skill_id\": \"{{skillID}}\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}
// Code generated by go-bindata.
// sources:
// static/view/edit.html
// static/view/view.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticViewEditHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8e\xb1\x6a\xc3\x30\x14\x45\x77\x7f\xc5\xe3\x42\xd7\x28\xe9\xd4\x41\xd2\x50\xe8\xdc\x42\xf2\x03\x4a\xf4\x52\x3f\xb0\x25\x63\x3d\xab\x35\x22\xff\x5e\x3c\xb8\xd9\xcf\x3d\xf7\xd8\xfe\xe4\x3f\xa2\xa8\xa4\x6f\x6a\xed\x70\x11\x1d\xf8\xf1\xb0\xa6\x3f\xf9\xae\xb3\xf7\x3c\x8f\x14\x6e\x2a\x39\x39\x98\x12\x2a\x9b\x27\x04\x1a\x59\xfb\x1c\x1d\xbe\x3e\xcf\x17\xf8\x8e\xc8\x46\xa9\xde\x2a\xff\x6a\x98\x39\x50\x0a\x23\x3b\x5c\x73\x5c\x41\x73\xfe\x29\x0e\xaf\x47\xd0\x2d\x0f\xc5\xe1\xed\x08\xdf\xda\x34\x4b\xd2\x3b\xe1\xa5\x80\x0e\xef\x39\xae\xdb\xf7\xbe\xf7\xd6\x6c\xbe\x7f\xaf\xa4\x69\x51\xd2\x75\x62\x87\xb2\x5c\x47\x51\x50\x0d\xc3\xc2\x0e\xe7\x50\x19\x3b\x6f\xcd\xd6\xed\xbb\xbf\x00\x00\x00\xff\xff\xd9\xb4\x5a\xdd\xdc\x00\x00\x00")

func staticViewEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticViewEditHtml,
		"static/view/edit.html",
	)
}

func staticViewEditHtml() (*asset, error) {
	bytes, err := staticViewEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/view/edit.html", size: 220, mode: os.FileMode(511), modTime: time.Unix(1480192032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticViewViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x30\xb4\xab\xae\xd6\x0b\xc9\x2c\xc9\x49\xad\xad\xb5\xd1\xcf\x30\xb4\xe3\xe2\xb2\x29\xb0\xe3\x52\x50\x88\xb6\x49\x54\xc8\x28\x4a\x4d\xb3\x55\xd2\x4f\x4d\xc9\x2c\xd1\x47\x28\x53\xb2\x03\x09\xd8\xe8\x27\xda\xc5\x72\xd9\xe8\x17\x80\x74\xa4\x64\x96\x81\xf4\x54\x57\x17\x14\x65\xe6\x95\xa4\x29\x28\xa9\x16\x2b\x29\xe8\x39\xe5\xa7\x54\xd6\xd6\x72\xd9\xe8\x83\xa5\x01\x01\x00\x00\xff\xff\x18\x4f\x4c\xa5\x6c\x00\x00\x00")

func staticViewViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticViewViewHtml,
		"static/view/view.html",
	)
}

func staticViewViewHtml() (*asset, error) {
	bytes, err := staticViewViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/view/view.html", size: 108, mode: os.FileMode(511), modTime: time.Unix(1480190942, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/view/edit.html": staticViewEditHtml,
	"static/view/view.html": staticViewViewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"view": &bintree{nil, map[string]*bintree{
			"edit.html": &bintree{staticViewEditHtml, map[string]*bintree{}},
			"view.html": &bintree{staticViewViewHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

